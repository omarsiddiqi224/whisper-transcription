# deployment/cloudbuild.yaml
# Updated for Cloud Run GPU deployment

substitutions:
  _REGION: us-central1
  _PROJECT_ID: ust-genai-pa-poc-gcp

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build backend image with GPU support
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-f'
      - 'deployment/Dockerfile.backend'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/backend:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/backend:${SHORT_SHA}'
      - '.'

  # Step 2: Build frontend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-f'
      - 'deployment/Dockerfile.frontend'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:${SHORT_SHA}'
      - '.'

  # Step 3: Push backend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/backend:latest'
    waitFor: ['build-backend']

  # Step 4: Push frontend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:latest'
    waitFor: ['build-frontend']

  # Step 5: Deploy backend to Cloud Run with GPU
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    entrypoint: 'gcloud'
    args:
      - 'beta'
      - 'run'
      - 'deploy'
      - 'whisper-backend'
      - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/backend:latest'
      - '--platform=managed'
      - '--region=${_REGION}'
      - '--memory=16Gi'
      - '--cpu=8'
      - '--gpu=1'
      - '--gpu-type=nvidia-l4'
      - '--no-cpu-throttling'
      - '--timeout=3600'
      - '--max-instances=10'
      - '--min-instances=0'
      - '--allow-unauthenticated'
      - '--set-env-vars=DEVICE=cuda,COMPUTE_TYPE=float16,WHISPER_MODEL=large-v3,LLM_MODEL=gpt-4o-mini'
      - '--update-secrets=HF_TOKEN=hf-token:latest,OPENAI_API_KEY=openai-api-key:latest'
    waitFor: ['push-backend']

  # Step 6: Get backend URL and update frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'update-frontend-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get backend URL
        BACKEND_URL=$(gcloud run services describe whisper-backend \
          --region=${_REGION} \
          --format='value(status.url)')
        
        # Update frontend HTML with backend URL
        mkdir -p /workspace/temp_frontend
        cp frontend/index.html /workspace/temp_frontend/
        
        # Replace localhost with actual backend URL
        sed -i "s|http://localhost:8000|$${BACKEND_URL}|g" /workspace/temp_frontend/index.html
        sed -i "s|ws://localhost:9090|wss://$${BACKEND_URL#https://}/ws|g" /workspace/temp_frontend/index.html
        
        # Create updated Dockerfile for frontend
        cat > /workspace/Dockerfile.frontend.updated << 'EOF'
        FROM nginx:alpine
        COPY temp_frontend/index.html /usr/share/nginx/html/
        RUN echo 'server { \
            listen 80; \
            location / { \
                root /usr/share/nginx/html; \
                try_files $$uri /index.html; \
            } \
        }' > /etc/nginx/conf.d/default.conf
        EXPOSE 80
        EOF
    waitFor: ['deploy-backend']

  # Step 7: Build updated frontend
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend-updated'
    args:
      - 'build'
      - '-f'
      - '/workspace/Dockerfile.frontend.updated'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:updated'
      - '/workspace'
    waitFor: ['update-frontend-config']

  # Step 8: Push updated frontend
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend-updated'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:updated'
    waitFor: ['build-frontend-updated']

  # Step 9: Deploy frontend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'whisper-frontend'
      - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:updated'
      - '--platform=managed'
      - '--region=${_REGION}'
      - '--memory=1Gi'
      - '--cpu=1'
      - '--max-instances=100'
      - '--allow-unauthenticated'
    waitFor: ['push-frontend-updated']

  # Step 10: Display deployment information
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'display-urls'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "========================================="
        echo "Deployment Complete with GPU Support!"
        echo "========================================="
        echo ""
        echo "Frontend URL:"
        gcloud run services describe whisper-frontend \
          --region=${_REGION} \
          --format='value(status.url)'
        echo ""
        echo "Backend URL:"
        gcloud run services describe whisper-backend \
          --region=${_REGION} \
          --format='value(status.url)'
        echo ""
        echo "Features:"
        echo "• NVIDIA L4 GPU for transcription"
        echo "• Whisper large-v3 model"
        echo "• GPT-4o-mini for summarization"
        echo "• Auto-scaling with GPU"
        echo "========================================="

timeout: 1800s

images:
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/backend:latest'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/whisper-repo/frontend:updated'