# deployment/cloudbuild.yaml
# This file automates building and deploying your application to GCP

# Substitute these variables with your actual values
substitutions:
  _REGION: us-central1
  _CLUSTER_NAME: whisper-cluster
  _CLUSTER_ZONE: us-central1-a

steps:
  # Step 1: Build the backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-f'
      - 'deployment/Dockerfile.backend'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/backend:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/backend:${SHORT_SHA}'
      - '.'

  # Step 2: Build the frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-f'
      - 'deployment/Dockerfile.frontend'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/frontend:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/frontend:${SHORT_SHA}'
      - '.'

  # Step 3: Push backend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/backend:latest'
    waitFor: ['build-backend']

  # Step 4: Push frontend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/frontend:latest'
    waitFor: ['build-frontend']

  # Step 5: Update Kubernetes deployment files with new image tags
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'prepare-k8s-files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Replace placeholders in k8s files
        sed "s|REGION|${_REGION}|g; s|PROJECT_ID|${PROJECT_ID}|g" \
          deployment/k8s-deployment.yaml > /workspace/k8s-deployment-updated.yaml
        
        sed "s|REGION|${_REGION}|g; s|PROJECT_ID|${PROJECT_ID}|g" \
          deployment/k8s-service.yaml > /workspace/k8s-service-updated.yaml

  # Step 6: Get GKE cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-credentials'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${_CLUSTER_NAME}'
      - '--zone=${_CLUSTER_ZONE}'
      - '--project=${PROJECT_ID}'

  # Step 7: Create or update Kubernetes secrets
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'create-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if secret exists, if not create it
        kubectl get secret whisper-secrets || \
        kubectl create secret generic whisper-secrets \
          --from-literal=hf-token="${_HF_TOKEN}" \
          --from-literal=openai-key="${_OPENAI_API_KEY}"
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    secretEnv: ['_HF_TOKEN', '_OPENAI_API_KEY']

  # Step 8: Deploy backend to Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deploy-backend'
    args:
      - 'apply'
      - '-f'
      - '/workspace/k8s-deployment-updated.yaml'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['push-backend', 'push-frontend', 'create-secrets']

  # Step 9: Deploy services to Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deploy-services'
    args:
      - 'apply'
      - '-f'
      - '/workspace/k8s-service-updated.yaml'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'

  # Step 10: Wait for rollout to complete
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'wait-rollout'
    args:
      - 'rollout'
      - 'status'
      - 'deployment/whisper-backend'
      - '--timeout=600s'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'

  # Step 11: Get the service external IP
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'get-service-ip'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "========================================="
        echo "Deployment Complete!"
        echo "========================================="
        kubectl get service frontend-service
        echo "========================================="
        echo "Your application will be available at the EXTERNAL-IP shown above"
        echo "Note: It may take 2-3 minutes for the IP to be assigned"
        echo "========================================="
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'

# Configure Cloud Build to access secrets from Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/hf-token/versions/latest
      env: '_HF_TOKEN'
    - versionName: projects/${PROJECT_ID}/secrets/openai-api-key/versions/latest
      env: '_OPENAI_API_KEY'

# Build timeout (30 minutes should be enough)
timeout: 1800s

# Use machines with more resources for faster builds
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# Images to be pushed to Artifact Registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/backend:latest'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/backend:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/frontend:latest'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/whisper-repo/frontend:${SHORT_SHA}'